{"version":3,"sources":["Chatheader.js","Message.js","features/appSlice.js","features/counterAPI.js","features/userSlice.js","Chat.js","SidebarChannel.js","firebase.js","Sidebar.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Chatheader","channelName","className","placeholder","Message","timestamp","user","message","Avatar","src","photo","displayName","Date","toDate","toUTCString","appSlice","createSlice","name","initialState","channelID","reducers","setChannelInfo","state","action","payload","actions","selectChannelID","app","selectChannelName","fetchCount","amount","Promise","resolve","setTimeout","data","createAsyncThunk","a","response","userSlice","login","value","logout","selectUser","Chat","useSelector","channelId","useState","input","setinput","messages","setMessages","useEffect","db","collection","doc","orderBy","onSnapshot","snapshot","docs","map","fontSize","disabled","onChange","e","target","type","conClick","preventDefault","add","firebase","firestore","FieldValue","serverTimestamp","SidebarChannel","id","dispatch","useDispatch","onClick","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","GoogleAuthProvider","Sidebar","channels","setChannels","prompt","channel","signOut","uid","substring","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","store","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad19d7a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Chatheader.css\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport EditLocationRoundedIcon from \"@material-ui/icons/EditLocationRounded\";\r\nimport PeopleAltRoundedIcon from \"@material-ui/icons/PeopleAltRounded\";\r\nimport SearchRoundedIcon from \"@material-ui/icons/SearchRounded\";\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\nimport HelpRoundedIcon from \"@material-ui/icons/HelpRounded\";\r\n\r\nfunction Chatheader( channelName ) {\r\n    return (\r\n        <div className=\"chatheader\">\r\n        \r\n            <div className=\"chatheader_left\">\r\n                <h3>\r\n                    <span className=\"chatheadername\">#\r\n                    </span>{channelName}\r\n                </h3>\r\n            </div>\r\n            <div className=\"chatheader_right\">\r\n                <NotificationsIcon />\r\n                <EditLocationRoundedIcon />\r\n                <PeopleAltRoundedIcon />\r\n\r\n                <div className=\"chatheadersearch\">\r\n                    <input placeholder=\"Search\" />\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chatheader\r\n","import React from 'react';\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport \"./Message.css\";\r\n\r\nfunction Message({timestamp, user, message}) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo} />\r\n            <div className=\"messageinfo\">\r\n                <h4>{user.displayName}\r\n                    <span className=\"messagetime\">{new Date(timestamp?.toDate().toUTCString())}</span>\r\n                </h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState : {\r\n    channelID: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelID = action.payload.channelID;\r\n      state.channelName = action.payload.channelName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\nexport const selectChannelID = (state) => state.app.channelID;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\nexport default appSlice.reducer;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n    return new Promise((resolve) =>\r\n      setTimeout(() => resolve({ data: amount }), 500)\r\n    );\r\n  }","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    return response.data;\n  }\n);\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState : {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.value += action.payload;\n    },\n    logout: (state)=> {\n      state.user = null;\n    }\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import React from 'react';\r\nimport Chatheader from './Chatheader';\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport Message from \"./Message\";\r\nimport \"./Chat.css\";\r\nimport { useSelector } from 'react-redux';\r\nimport { selectChannelID, selectChannelName } from './features/appSlice';\r\nimport { selectUser } from './features/userSlice';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport firebase from \"firebase\";\r\nimport db from \"firebase\";\r\nfunction Chat() {\r\n    const user = useSelector(selectUser);\r\n    const channelId = useSelector(selectChannelID);\r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setinput] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (channelId) {\r\n            db.collection('channels')\r\n                .doc(channelId)\r\n                .collection(\"messages\")\r\n                .orderBy(\"timestamp\", \"desc\")\r\n                .onSnapshot((snapshot) =>\r\n                    setMessages(snapshot.docs.map((doc) => doc.data()))\r\n                );\r\n        }\r\n\r\n    }, [channelId]);\r\n\r\n    const sendMessage= (e) =>{\r\n        e.preventDefault();\r\n        db.collection('channels')\r\n        .doc(channelId)\r\n        .collection('messages')\r\n        .add({\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            message: input,\r\n            user: user\r\n        });\r\n\r\n        setinput(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <Chatheader channelName={channelName} />\r\n            <div className=\"chatmessage\">\r\n                {messages.map((message) => (\r\n                    <Message \r\n                    timestamp={message.timestamp}\r\n                    message={message.message}\r\n                    user={message.user}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <div className=\"chatinput\">\r\n                <AddCircleIcon fontSize=\"large\" />\r\n                <form >\r\n                    <input value={input} disabled={!channelId} onChange={e => setinput(e.target.value)}\r\n                        placeholder={`Message #${channelName}`} />\r\n                    <button disabled={!channelId} className=\"chatinputbutton\" type=\"submit\" conClick={sendMessage} >Send Message</button>\r\n                </form>\r\n                <div className=\"chatinputicon\">\r\n                    <CardGiftcardIcon />\r\n\r\n                    <EmojiEmotionsIcon fontSize=\"large\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport \"./SidebarChannel.css\";\r\nimport {setChannelInfo} from \"./features/appSlice\";\r\nfunction SidebarChannel({ id, channelName }) {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"sidebarChannel\" \r\n        onClick={() =>\r\n            dispatch(\r\n                setChannelInfo({\r\n                    channelId: id,\r\n                    channelName: channelName,\r\n                })\r\n            ) \r\n        }>\r\n            <h4>\r\n                <span className=\"sidebarChannel__hash\">#</span>\r\n                {channelName}\r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\nexport default SidebarChannel;\r\n","import firebase from 'firebase';\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAanwLwOfyev664-UyFp8QieGu9bbFU_AI\",\r\n    authDomain: \"discord-app-99435.firebaseapp.com\",\r\n    projectId: \"discord-app-99435\",\r\n    storageBucket: \"discord-app-99435.appspot.com\",\r\n    messagingSenderId: \"759305442408\",\r\n    appId: \"1:759305442408:web:46dd80b0fc40f5d55dd7dd\",\r\n    measurementId: \"G-1MRJ1RRPHM\"\r\n};\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { useEffect } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport SidebarChannel from \"./SidebarChannel\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport SignalCellularAltIcon from \"@material-ui/icons/SignalCellularAlt\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport CallIcon from \"@material-ui/icons/Call\";\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport HeadsetIcon from \"@material-ui/icons/Headset\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db, {auth} from \"./firebase\";\r\nimport { useState } from \"react\";\r\n\r\nfunction Sidebar() {\r\n    const user= useSelector(selectUser);\r\n    const [channels, setChannels] = useState([]);\r\n    useEffect(() => {\r\n        db.collection('channels').onSnapshot(snapshot =>(\r\n            setChannels(\r\n                snapshot.docs.map((doc) =>({\r\n                    id: doc.id,\r\n                    channels: doc.data(),\r\n                }))\r\n            ))\r\n        );\r\n    }, []);\r\n\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt(\"Enter a new channel name\");\r\n\r\n        if (channelName){\r\n            db.collection('channels').add({\r\n                channelName: channelName,\r\n            });\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <h3>Messy World</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n            <div className=\"sidebarchannels\">\r\n                <div className=\"sidebarchannelheader\">\r\n                    <div className=\"sidebarheader\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Chat Channels</h4>\r\n                    </div>\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebaraddChannel\" />\r\n                </div>\r\n                <div className=\"sidebarchannellist\">\r\n                    {channels.map(({ id, channel }) =>(\r\n                        <SidebarChannel \r\n                            key={id} \r\n                            id={id}\r\n                            channelName={channel.channelName} \r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        <div className=\"sidebarvoice\">\r\n            <SignalCellularAltIcon className=\"sidebarvoiceicon\" fontSize=\"large\"/>\r\n            <div className=\"sidebarvoiceinfo\">\r\n                <h3>Voice Connected</h3>\r\n                <p>Stream</p>\r\n            </div>\r\n            <div className=\"sidebarvoiceicon\">\r\n                <InfoOutlinedIcon />\r\n                <CallIcon />\r\n            </div>\r\n        </div>\r\n        <div className=\"sidebarprofile\">\r\n            <Avatar onClick={ ()=> auth.signOut()} src={ user.photo } />\r\n            <div className=\"sidebarprofileinfo\">\r\n                <h3>{ user.displayName }</h3>\r\n                <p>#{user.uid.substring(0,5)}</p>\r\n            </div>\r\n            <div className=\"sidebarprofileicon\">\r\n                <MicIcon />\r\n                <HeadsetIcon />\r\n                <SettingsIcon />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import { Button } from '@material-ui/core';\r\nimport { auth, provider } from \"./firebase\";\r\nimport React from 'react';\r\nimport \"./Login.css\";\r\n\r\nfunction Login() {\r\n    const signIn = ()=>{\r\n        auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n\r\n    };\r\n    return (\r\n        <div className=\"login\">\r\n            <h2>DISCORD</h2>\r\n            <div className=\"loginlogo\">\r\n                <img src=\"https://logo-logos.com/wp-content/uploads/2018/03/discord_icon_logo_remix_small.png\" alt=\"Discord bot Logo\" />\r\n            </div>\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react';\nimport './App.css';\nimport Chat from \"./Chat\";\nimport { selectUser } from './features/userSlice';\nimport Sidebar from \"./Sidebar\";\nimport Login from \"./Login\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { auth } from './firebase';\nimport { login, logout } from \"./features/userSlice\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const user = useSelector (selectUser);\n\n  useEffect(() => {\n      auth.onAuthStateChanged((authUser)=> {\n\n        if (authUser) {\n          dispatch(login({\n            uid: authUser.uid,\n            photo: authUser.photoURL,\n            email: authUser.email,\n            displayName: authUser.displayName,\n          }))\n        }\n        else{\n          dispatch(logout());\n        }\n      })\n  }, [dispatch])\n  return (\n    <div className=\"app\">\n      {user ? (\n        <>\n          <Sidebar />\n\n          <Chat />\n        </>\n      ) : (\n        <Login />\n      )\n    }\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport appReducer from '../features/appSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}